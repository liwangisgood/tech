redis
hash
  hset hget hmget hmset hgetall hkeys hvals hincrby hsetnx
list 类似Java LinkedList双向链表 有序 可重 插入删除快 查询速度一般，如朋友圈点赞先后顺序、评论列表、视频排行榜系统、榜单的维度
  lpush rpush lpop rpop lrange  blpop brpop
set 类似Java HashSet 无序 不重 查找快 支持交集、并集、差集
  单个集合操作                                        多个集合操作
  sadd srem scard sismember smembers sinter sdiff sunion
应用场景
  缓存 计数器 分布式会话 排行榜 最新列表 分布式锁 消息队列
  用什么类型？
sortedset
  zadd,zrem,zscore,zrank,zrevrank,,zcard,zcount,zincrby,zrange,zrangebyscore,zdiff,zinter,zunion
redis客户端
  jedis,lettue,redisson,java-redis-client,vertx-redis-client
  spring-data-redis：兼容jedis lettuce
Redis6.0之前为什么不用多线程？
1、使用Redis、 CPU不是瓶颈，受制内存、网络
2、提高Redis, Pipeline (命令批量)每秒100万个请求
3、单线程，内部维护比较低
4、
如果是多线程(线程切换、加锁\解锁、导致死锁问题)
5、
惰性Rehash (渐进性式的Rehash)
般的公司，单线程Redis就够了
Redis6.0之后为什么要引入多线程？
1、 单线程就够了。 数据->内存响应时间100纳秒。
比较小的数据包，8w~ 10w QPS (极限值)
2、大的公司，需要更大QPS，IO的多线程(内部执行命令还
是单线程)
3、为什么不采用分布式架构---很大的缺点。
服务数量多，维护成本很高。
Redis命令不适用数据分区。
数据分区，无法解决热点读/写的问题。
数据倾斜、重新分配、扩容、缩容，更加复杂。
多线程任务分摊到Redis同步IO中读写 负载。

Jedis 与 Redisson 对比有什么优缺点？
  Jedis 是 Redis 的 Java 实现的客户端，其 API 提供了比较全面的 Redis 命
  令的支持；Redisson 实现了分布式和可扩展的 Java 数据结构，和 Jedis 相
  比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、 分区等
Redis 特性。
Redisson 的宗旨是促进使用者对 Redis 的关注分离，从而让使用者能够将精
力更集中地放在处理业务逻辑上。

SpringDataRedis
  1、整合Jedis Lettuce
  2、提供RedisTemplate
  3、发布与订阅
  4、哨兵与集群
  5、基于Lettuce响应式编程
  6、基于JDK、JSON、字符串、Spring对象序列化
  7、JDKCollection

SpringDataRedis使用步骤
  1、引入spring-boot-starter-data-redis、连接池依赖
  2、application.yml配置Redis信息 ip port password 连接池信息
  3、注入RedisTemplate 默认key value jdk序列化处理 1、可读性差 2、内存占用大(和直接rdm操作相比)
	     为什么需要用StringRedisTemplate 而不是RedisTemplate？
		RedisTemplate两种序列化时间方案：1、自定义RedisTemplate 2、使用StringRedisTemplate
                             需要key转string value转json(redis序列化json，反序列化Object空间占用额外)  通过是指RedisTemplate key value的序列化内容来做
	             最后以上解决不需在自己定义序列化器：反而用StringRedisTemplate 就可以实现key、value的任意类型String, 如：String、Object
 										配合JSON工具
基于session实现登录
  1、发送短信验证码，提交并校验手机号->生成验证码->保存验证码到session->发送验证码到用户
  2、短信验证码登录、注册，提交手机号和验证码->校验验证码->根据手机号查询用户->(不存在则创建新用户，保存到数据库中)->保存用户数据到session
  3、校验登录状态，请求携带cookie->从session获取用户->没有用户信息未登录拦截请求->放行有用户信息保存用户信息到ThreadLocal

  1~2条数据需要缓存，如何设计这个存储案例？ 分布式存储，用redis如何落地 阿里腾讯
  3种解决方案
    1、哈希取余分区(最通用、最常用)： hash(key)%N机器台数来决定数据映射到哪一个节点上。
      优：使用Hash算法让固定的一部分请求落到同一台服务器上，这样每台服务器固定处理一部分请求(并维护这些请求的信息)，起到负载均衡+分而治之的作用。分布式存储值哈希取余算法
      缺；原来规划好的节点，进行扩容或者缩容就比较麻烦了额，不管扩缩，每次数据变动导致节点有变动，映射关系需要重新进行计算，在服务器个数固定不变时没有问题，如果需要弹性扩容或故障停机的情况下，原来的取模公式就会发生变化:Hash(key)%3会变成Hash(key) %?。此时地址经过取余运算的结果将发生很大变化，根据公式获取的服务器也会变得不可控。某个redis机器宕机了，由于台数数量变化，会导致hash取余全部数据重新洗牌。(有数据安全隐患的)

session的问题？
数据：1、用户标识  2、会话信息 3、用户偏好 4、浏览行为
优：1、保存登录状态 2、个性化推荐 3、广告定向投放 4、数据分析
缺：1、隐私泄露 2、跟踪行为 3、信息泄露

redis session共享问题？
后端某一节点集群部署，实现session共享
优：1、横向扩展 2、集中管理 3、高性能低延迟 4、持久化选择
缺：1、单点故障 2、网络开销 3、数据安全性 4、资源消耗


    2、一致性哈希算法分区：提出一致性Hash解决方案目的是当服务器个数发生变动时，尽量减少影响客户端到服务器的映射关系。
    
      优：解决一致性哈希算法的容错性，某台机器宕机了，仅仅影响之前已经写入和后续读取该机器的数据，不影响接下来写入和读取的数据(会沿着环某一方向继续向前走)。
          一致性哈希算法的扩展性
      缺：

# 集群结点各节点关系，主节点、从节点
cluster nodes
# 已登录节点的信息
cluster info
# 集群方式启动
redis-cli -p 6379 -c
# 退出redis客户端
exit
# 查看集群信息
redis-cli --cluster check ip:6381


主从容错切换迁移
  主机a宕机从机b变为主机，a机恢复会成为b的从机。若想主机a重新恢复为主机，停掉b机，a机自动恢复为主机，恢复b机即可变为所有故障前的状态机子

主从扩容需求分析(三主三从 变为 四主四从，考虑Hash槽重新分配)
  # 1、机a为新增的节点，暂时没有槽位
  redis-cli --cluster add-node 本机a的ip:本机端口 首节点:对应端口
  # 2、重新分配槽号
  redis-cli --cluster reshard IP地址(集群create时候第一个的ip):端口号
  What is the receiving node ID？新加入的机a的id
  all 是四个机子均分槽位,其他机子各自匀出一点槽位
  # 3、为新添加机a 添加从机b
  redis-cli --cluster add-node ip:新slave端口 ip:新master端口 --cluster-slave --cluster-master-id 新主机节点ID
  
主从缩容需求分析(四主四从 变为 三主三从，考虑Hash槽重新分配)
  # 1、删除节点从备用机开始删（不同直接stop 从机）
  redis-cli --cluster del-node 删除节点ip:port 从机id
  # 2、重新分配槽号 
  What is the receiving node ID？谁来接受槽号
  Source node  node-id 谁来发送槽号(该节点要被删除)
  # 3、检查集群槽点分配情况（槽位数正常为0）
  redis-cli --cluster check 集群任意节点ip:对应端口port
  # 4、删除主节点
  redis-cli --cluster del-node 原master机ip:该机port
  redis-cli --cluster check 任意ip:对应port

docker 配置redis主从，哨兵sentinel
docker run --restart=always \
-p 6380:6380 \
--name redis_master1 \
-v /app/redis_master1/redis.conf:/etc/redis/redis.conf \
-v /app/redis_master1/data:/data \
-d redis:7.0.12 redis-server /etc/redis/redis.conf

docker run --restart=always \
-p 6380:6380 \
--name redis_master1 \
-d redis:7.0.12

Redis集群主从复制？
https://www.cnblogs.com/wanghuizhao/p/17481632.html

Redis为什么那么快？
网络：多路复用设计，提升整体并发处理连接数，Server端的所有IO操作都主线程
CPU
内存

redis过期了为什么内存没释放？
1、
set name liwang ex 120
set name liwang1 key过期时间被擦除
2、redis对过期key读写时惰性删除、定时删除(可能会出现部分key已经过期但没有被处理掉的情况)

redis key没设置过期时间为什么被redis主动删除了？
超过内存限定，出发主动清理策略
内存淘汰策略

redis主从、哨兵、集群架构优缺点比较？
https://baijiahao.baidu.com/s?id=1763613487831111392&wfr=spider&for=pc
redis主从：
    优点：1、可靠性：主服务器故障从服务器恢复数据 2、从服务器分担主服务器读压力 提升系统吞吐量和响应速度 3、简单易用slaveof命令和配置文件实现主从复制 4、适用于读多写少场景
    缺点：1、主从复制不能扩展写性能，所有的写操作都在主节点

redis集群：
    优点：1、自动故障转移 2、适用于读写比较频繁 读写分离 负载均衡
    缺点：2、







































