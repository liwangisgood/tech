redis
hash
  hset hget hmget hmset hgetall hkeys hvals hincrby hsetnx
list 类似Java LinkedList双向链表 有序 可重 插入删除快 查询速度一般，如朋友圈点赞先后顺序、评论列表、视频排行榜系统、榜单的维度
  lpush rpush lpop rpop lrange  blpop brpop
set 类似Java HashSet 无序 不重 查找快 支持交集、并集、差集
  单个集合操作                                        多个集合操作
  sadd srem scard sismember smembers sinter sdiff sunion
应用场景
  缓存 计数器 分布式会话 排行榜 最新列表 分布式锁 消息队列
  用什么类型？
sortedset
  zadd,zrem,zscore,zrank,zrevrank,,zcard,zcount,zincrby,zrange,zrangebyscore,zdiff,zinter,zunion
redis客户端
  jedis,lettue,redisson,java-redis-client,vertx-redis-client
  spring-data-redis：兼容jedis lettuce
Redis6.0之前为什么不用多线程？
1、使用Redis、 CPU不是瓶颈，受制内存、网络
2、提高Redis, Pipeline (命令批量)每秒100万个请求
3、单线程，内部维护比较低
4、
如果是多线程(线程切换、加锁\解锁、导致死锁问题)
5、
惰性Rehash (渐进性式的Rehash)
般的公司，单线程Redis就够了
Redis6.0之后为什么要引入多线程？
1、 单线程就够了。 数据->内存响应时间100纳秒。
比较小的数据包，8w~ 10w QPS (极限值)
2、大的公司，需要更大QPS，IO的多线程(内部执行命令还
是单线程)
3、为什么不采用分布式架构---很大的缺点。
服务数量多，维护成本很高。
Redis命令不适用数据分区。
数据分区，无法解决热点读/写的问题。
数据倾斜、重新分配、扩容、缩容，更加复杂。
多线程任务分摊到Redis同步IO中读写 负载。

Jedis 与 Redisson 对比有什么优缺点？
  Jedis 是 Redis 的 Java 实现的客户端，其 API 提供了比较全面的 Redis 命
  令的支持；Redisson 实现了分布式和可扩展的 Java 数据结构，和 Jedis 相
  比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、 分区等
Redis 特性。
Redisson 的宗旨是促进使用者对 Redis 的关注分离，从而让使用者能够将精
力更集中地放在处理业务逻辑上。

SpringDataRedis
  1、整合Jedis Lettuce
  2、提供RedisTemplate
  3、发布与订阅
  4、哨兵与集群
  5、基于Lettuce响应式编程
  6、基于JDK、JSON、字符串、Spring对象序列化
  7、JDKCollection

SpringDataRedis使用步骤
  1、引入spring-boot-starter-data-redis、连接池依赖
  2、application.yml配置Redis信息 ip port password 连接池信息
  3、注入RedisTemplate 默认key value jdk序列化处理 1、可读性差 2、内存占用大(和直接rdm操作相比)
	     为什么需要用StringRedisTemplate 而不是RedisTemplate？
		RedisTemplate两种序列化时间方案：1、自定义RedisTemplate 2、使用StringRedisTemplate
                             需要key转string value转json(redis序列化json，反序列化Object空间占用额外)  通过是指RedisTemplate key value的序列化内容来做
	             最后以上解决不需在自己定义序列化器：反而用StringRedisTemplate 就可以实现key、value的任意类型String, 如：String、Object
 										配合JSON工具
基于session实现登录
  1、发送短信验证码，提交并校验手机号->生成验证码->保存验证码到session->发送验证码到用户
  2、短信验证码登录、注册，提交手机号和验证码->校验验证码->根据手机号查询用户->(不存在则创建新用户，保存到数据库中)->保存用户数据到session
  3、校验登录状态，请求携带cookie->从session获取用户->没有用户信息未登录拦截请求->放行有用户信息保存用户信息到ThreadLocal

session的问题？
数据：1、用户标识  2、会话信息 3、用户偏好 4、浏览行为
优：1、保存登录状态 2、个性化推荐 3、广告定向投放 4、数据分析
缺：1、隐私泄露 2、跟踪行为 3、信息泄露

redis session共享问题？
后端某一节点集群部署，实现session共享
优：1、横向扩展 2、集中管理 3、高性能低延迟 4、持久化选择
缺：1、单点故障 2、网络开销 3、数据安全性 4、资源消耗


          









