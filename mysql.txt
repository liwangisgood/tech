
一、创建mysql单机容器
  1、mkdir -p /app/mysql57/{logs,conf,data}
  2、docker run -it --name=mysql57 -d  -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 --privileged=true -v /app/mysql57/log:/var/log/mysql -v /app/mysql57/data:/var/lib/mysql -v /app/mysql57/conf:/etc/mysql/conf.d mysql:5.7
  3、配置文件conf
    [client]
    default_character_set=utf8
    [mysqld]
    collation_server=utf8_general_ci
    character_set_server=utf8
  4、docker mysql:5.7问题？
    1、乱码
      docker mysql插入中文乱码问题（mysql8默认utf8
    2、数据持久化

二、创建mysql集群部署

mkdir -p /app/mysql_master1/{log,conf,data}
mkdir -p /app/mysql_slave1/{log,conf,data}
mkdir -p /app/mysql_slave2/{log,conf,data}

1、主机
master1的my.cnf
#################################
[mysqld]
##“设置server_ id,同一局域网中需要唯一
server_id=101
##指定不需要同步的数据库名称
binlog-ignore-db=mysql
##开启二进制日志功能
log-bin=mall-mysql-bin
##设置二进制日志使用内存大小(事务)
binlog_cache_size=1M
##设置使用的二进制日志格式( mixed, statement, row)
binlog_format=mixed
##二进制日志过期清理时间。默认值为0,表示不自动清理。
expire_logs_days=7
##跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。
##如: 1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致
slave_skip_errors=1062

[client]
default_character_set=utf8
[mysqld]
collation_server=utf8_general_ci
character_set_server=utf8
#################################

#/bin/bash没有效果
docker run -it --name=mysql57_master1 -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 --privileged=true -v /app/mysql_master1/log:/var/log/mysql -v /app/mysql_master1/data:/var/lib/mysql -v /app/mysql_master1/conf:/etc/mysql/conf.d mysql:5.7 

docker exec -it mysql57_master1 /bin/bash

mysql -uroot -p
123456

CREATE USER 'slave'@'%' IDENTIFIED BY '123456';

GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%'

exit

help

docker run -it --name=mysql57 -d  -p 3308:3306 -e MYSQL_ROOT_PASSWORD=123456 --privileged=true -v /app/mysql57/log:/var/log/mysql -v /app/mysql57/data:/var/lib/mysql -v 

2、从机
docker run -it --name=mysql57_slave1 -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=123456 --privileged=true -v /app/mysql_slave1/log:/var/log/mysql -v /app/mysql_slave1/data:/var/lib/mysql -v /app/mysql_slave1/conf:/etc/mysql/conf.d mysql:5.7 

slave1的my.cnf
#################################
[mysqld]
##设置server_ id,同一局域网中需要唯一
server_id=102
##指定不需要同步的数据库名称
binlog-ignore-db=mysql
##开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用
log-bin=mall-mysql-slave1-bin
##设置二进制日志使用内存大小(事务)
binlog_cache_size=1M
##设置使用的二进制日志格式( mixed, statement, row)
binlog_format=mixed
##二进制日志过期清理时间。默认值为0,表示不自动清理。
expire_logs_days=7
#跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。
##如: 1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致
slave_skip_errors=1062
## relay_log配置中继日志
relay_log=mall-mysql-relay-bin
## log_slave_updates表示slave将复制事件写进自己的二进制日志
log_slave_updates=1
##slave设置为只读(具有super权限的用户除外)
read_only=1

[client]
default_character_set=utf8
[mysqld]
collation_server=utf8_general_ci
character_set_server=utf8
#################################
查看master_log_file= 'mall-mysql-bin.000003'
show master status;

docker exec -it mysql57_slave1 bash
mysql -uroot -p
123456

master_host: 主数据库的IP地址;
master_port: 主数据库的运行端口;
master_user:在主数据库创建的用于同步数据的用户账号;
master_password:在主数据库创建的用于同步数据的用户密码;
master_log_file: 指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File 参数;
master_log_pos: 指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数;
master_connect_retry: 连接失败重试的时间间隔，单位为秒。
从数据库配置主从复制
change master to master host= '宿主机ip', master_user='slave1', master_password='123456',master_port=3307,
master_log_file='mall-mysql-bin.000003', master_log_pos=617, master_connect_retry=30;

use mysql;
select * from user;

change master to master_host= '117.78.11.223', master_user='slave1', master_password='123456',master_port=3307,
master_log_file='mall-mysql-bin.000003', master_log_pos=617, master_connect_retry=30;

show slave status;

start slave;
          成功的：
            Slave_IO_Running: Connecting
            Slave_SQL_Running: Yes
